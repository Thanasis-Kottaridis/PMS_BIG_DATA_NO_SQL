// vres ena limani
db.port.find({"properties.libelle_po": "Brest"}).pretty()

// vres ola ta karavia me elliniki simea
db.ais_navigation.find({ 'ship_metadata.mmsi_country.country': 'Greece' }).pretty();

// vres tis troxes olon ton karavion me elliniki simea.

//step 1
// vres ola ta ellinika karavia kai groupariseta (kane kai to sum ton points pou exoun)
db.ais_navigation2.aggregate([{$match: {'ship_metadata.mmsi_country.country': 'Greece'}}, {$group: {_id: "$mmsi", total: {$sum: 1}}}])

// step 2
// kane push ta navigational data gia kathe plio se mia lista oste eki na exoume to tranjactory
db.ais_navigation2.aggregate([{$match: {'ship_metadata.mmsi_country.country': 'Greece' }}, {$group: {_id: "$mmsi", total: {$sum: 1}, tranjectory: {$push: "$location"}}}])

// VRES OLES TIS TROXES GIA TA PLIA ME ELLINIKI SIMEA STIN Celtic sea
//ME KARFOTO POLY

// dokimazontas to query me xerato polygon
db.ais_navigation2.aggregate({$match: {"ship_metadata.mmsi_country.country": "Greece", location: {$geoWithin: { $geometry : { "type" : "Polygon", "coordinates" : [ [ [ -6.81537294430575, 52.21828603757075 ], [ -6.814207554235082, 52.218363046517425 ], [ -6.813260435920199, 52.21829867394473 ], [ -6.812489748403038, 52.21828865999373 ], [ -6.811812638942001, 52.218389749187736 ], [ -6.8111548424219, 52.21852064101489 ], [ -6.81061685088676, 52.218660115971716 ], [ -6.810236811779276, 52.218777656463715 ], [ -6.809991836453918, 52.218936801392346 ], [ -6.809731245300554, 52.21917855714483 ], [ -6.809260368371184, 52.21946835558029 ], [ -6.808624148385604, 52.219781637113016 ], [ -6.807970643430309, 52.22018313404453 ], [ -6.807559012937958, 52.22055244424001 ], [ -6.807311654409176, 52.2208424809958 ], [ -6.807131409586731, 52.22105550790559 ], [ -6.806821346727617, 52.22121894349954 ], [ -6.806283831833156, 52.221463203864005 ], [ -6.805716752625898, 52.221928835047834 ], [ -6.805561542231231, 52.222511053442474 ], [ -6.805818677289921, 52.2230799196027 ], [ -6.806283831833156, 52.223520755578534 ], [ -6.807314157222407, 52.223751544997924 ], [ -6.809160470778949, 52.22384464731266 ], [ -6.8104716535438, 52.22353434523387 ], [ -6.811538458133185, 52.22347235676398 ], [ -6.812122941020704, 52.223335504230306 ], [ -6.812357902395149, 52.22308254202579 ], [ -6.812584042319514, 52.222701311316655 ], [ -6.812993764450511, 52.222207069101046 ], [ -6.813722610110233, 52.22174847151484 ], [ -6.814514875061292, 52.22147703183967 ], [ -6.815174102402722, 52.22129714494744 ], [ -6.815787553352692, 52.221116543094126 ], [ -6.816444158271111, 52.22086334256932 ], [ -6.817037343898136, 52.220593214105634 ], [ -6.817508339538051, 52.220233321610635 ], [ -6.817815542553063, 52.219820857446734 ], [ -6.818071007570751, 52.219467043469336 ], [ -6.818266153260225, 52.21916687495147 ], [ -6.81837236858982, 52.21885943451542 ], [ -6.81826305419645, 52.21848845517815 ], [ -6.817998766829447, 52.218080043359464 ], [ -6.817570328907408, 52.21782255216914 ], [ -6.817051053163425, 52.2178461548763 ], [ -6.816366911003968, 52.21804225474642 ], [ -6.81537294430575, 52.21828603757075 ] ] ] } }}}})

// VRES OLES TIS TROXES GIA TA PLIA ME ELLINIKI SIMEA STIN Celtic sea
//EPAIKSE!
//step1 
var poly = db.world_seas.findOne({"properties.NAME": "Celtic Sea"})

//step 2 
//kane aggegate me geoWithin sto poly.geometry
 db.ais_navigation2.aggregate({$match: {"ship_metadata.mmsi_country.country": "Greece", location: {$geoWithin: {$geometry: poly.geometry}}}})

 // step 3 full query gia na parw ta tranjectory se array
db.ais_navigation2.aggregate([{$match: {"ship_metadata.mmsi_country.country": "Greece", location: {$geoWithin: {$geometry: poly.geometry}}}}, {$group: {_id: "$mmsi", total: {$sum: 1}, tranjectory: {$push: "$location"}}}])

// HELPFULL QUERIES GIA ANALISI
// pare to count ton plion pou girisan
db.ais_navigation2.aggregate([{$match: {"ship_metadata.mmsi_country.country": "Greece", location: {$geoWithin: {$geometry: poly.geometry}}}},{$count: "total_ships_in_poly"}])
//PERFORMANCE ANALYSIS




//SPATIO-TEMPORAL QUERY:
// gia tin ektelesi xoroxronikon query exoume ta eksis:
// to time range ton dedomenon mas :
/*
Max:
UNIX: 1459461599
GMT: Thursday, March 31, 2016 9:59:59 PM
Your time zone: Friday, April 1, 2016 12:59:59 AM GMT+03:00 DST
Relative: 5 years ago
*/

/*
MIN:
UNIX: 1443650401
GMT: Wednesday, September 30, 2015 10:00:01 PM
Your time zone: Thursday, October 1, 2015 1:00:01 AM GMT+03:00 DST
Relative: 5 years ago
*/

// episis xriazomaste kai kapoio valid poligono opos Celtic sea, the Channel and Bay of Biscay 
// (France) ta opoia einai apothikeumena sto wold seas collection

// esto oti pernoume to random range: 
/*
FROM:
Epoch timestamp: 1450025694
Timestamp in milliseconds: 1450025694000
Date and time (GMT): Sunday, December 13, 2015 4:54:54 PM
Date and time (your time zone): Sunday, December 13, 2015 6:54:54 PM GMT+02:00

TO:
Epoch timestamp: 1455382494
Timestamp in milliseconds: 1455382494000
Date and time (GMT): Saturday, February 13, 2016 4:54:54 PM
Date and time (your time zone): Saturday, February 13, 2016 6:54:54 PM GMT+02:00
*/

// Tote to proigoumeno geopatioal query metatrepete ws eksis:
db.ais_navigation2.aggregate([{$match: {"ship_metadata.mmsi_country.country": "Greece", location: {$geoWithin: {$geometry: poly.geometry}}, ts: {$gte: 1450025694, $lte: 1455382494} }}])
// full query gia na eksagoume tranjectory se array 
// (auto apantaei sto Retrieve trajectories in a spatio-temporal box)
db.ais_navigation2.aggregate([{$match: {"ship_metadata.mmsi_country.country": "Greece", location: {$geoWithin: {$geometry: poly.geometry}}, ts: {$gte: 1450025694, $lte: 1455382494}}}, {$group: {_id: "$mmsi", total: {$sum: 1}, tranjectory: {$push: "$location"}}}])


// HELPFULL QUERIES GIA ANALISI
 db.ais_navigation2.aggregate([{$match: {"ship_metadata.mmsi_country.country": "Greece", location: {$geoWithin: {$geometry: poly.geometry}}, ts: {$gte: 1450025694, $lte: 1455382494} }},{$count: "total_ships_in_poly"}])

 //RANGE QUERIES

 // VRES OLA TA PLIA pou kinithikan se aktina 100- 1000 nautika milia apo to limani tou burst 
 //STEP 1 vres to limani tou burst
 var port_point = db.world_port_geo.find({"properties.libelle_po": "Brest"})

 // step 2 orise posa metra einai ena nautiko mili se ena var (1852 meters)
 var nautical_mile_in_meters = 1852

 // step 3 ektelesi tou query me (thelei index gia na treksei auto to query) 
db.ais_navigation2.find({location: {$nearSphere: {$geometry: port_point.geometry, $maxDistance: 30*nautical_mile_in_meters}}})
// TO IDIO ME AGGREGATION
db.ais_navigation2.aggregate([{$geoNear: {near: port_point.geometry, distanceField: "dist.calculated", minDistance: nautical_mile_in_meters*10, maxDistance: nautical_mile_in_meters*30, spherical: true, key: "location"}}])

// step 4 grouparisma ana mmsi gia na apantisei sto erotima
db.ais_navigation2.aggregate([{$geoNear: {near: port_point.geometry, distanceField: "dist.calculated", minDistance: nautical_mile_in_meters*10, maxDistance: nautical_mile_in_meters*30, spherical: true, key: "location"}},{$group: {_id: "$mmsi"}}])


// SPATIO-TEMPORAL RANGE QUERY ME K-NN (pali apetite index 2d or 2d sphere)
// vres ta K plia pou perasan poio konta sto simio X to xriniko diastima apo T1 mexri T2

/* Esto to point: (to plio pou peira to point perase eki me ts: 1448977419 den einai sto range.)
	"coordinates" : [
			-4.1660385,
			50.334972
		]

    Kai timestamp apo 
    FROM:
    Epoch timestamp: 1450025694
    Timestamp in milliseconds: 1450025694000
    Date and time (GMT): Sunday, December 13, 2015 4:54:54 PM
    Date and time (your time zone): Sunday, December 13, 2015 6:54:54 PM GMT+02:00

    TO:
    Epoch timestamp: 1455382494
    Timestamp in milliseconds: 1455382494000
    Date and time (GMT): Saturday, February 13, 2016 4:54:54 PM
    Date and time (your time zone): Saturday, February 13, 2016 6:54:54 PM GMT+02:00
*/

// step 1 
// vrest ta 5 plisiestera ping sto simio
db.ais_navigation2.find({location:{ $near : {$geometry: { type: "Point",  coordinates: [ -4.1660385, 50.334972 ]}}}}).limit(5)

// step 2 filtrareta by timestamp
db.ais_navigation2.find({location:{ $near : {$geometry: { type: "Point",  coordinates: [ -4.1660385, 50.334972 ]}}}, ts: {$gte: 1450025694, $lte: 1455382494}}).limit(5)

// PARATIRISI : poli fast auto to query!!!! logo tou index pou 2d sphere

//PALOUKIA QUERY:
//1) Given a trajectory, find similar trajectories (threshold-based, k-most similar)
// malon thelei pymongo auto

// step 1 na eksagw tin troxia enos pliou gia mia mera:
/*
mmsi: 923166
mmsi: 227318010 pano apo 200 pings (ola mesa se enan kolpo den douleuei poli kala to k near eki oute to poligono) time: 300kati.
MMSI: 227002630 pano apo 600 ping poli kako sto k-most similar time: 874.672003030777(k-most) 25.kati (kanoniko )
        vectorized approach time --- 151.71992182731628 seconds ---

mmsi 228947000 90 ping se 1 min
        vect


from:
Epoch timestamp: 1448988894
Timestamp in milliseconds: 1448988894000
Date and time (GMT): Tuesday, December 1, 2015 4:54:54 PM
Date and time (your time zone): Tuesday, December 1, 2015 6:54:54 PM GMT+02:00

to: 
Epoch timestamp: 1449075294
Timestamp in milliseconds: 1449075294000
Date and time (GMT): Wednesday, December 2, 2015 4:54:54 PM
Date and time (your time zone): Wednesday, December 2, 2015 6:54:54 PM GMT+02:00
*/

//SUMPLE JSON
//{ "_id" : "14758088531027417655349570538753974408", "mmsi" : 240265000, "ts" : 1447134195, "nav_status" : { "id_status" : 0, "definition" : " under way using engine" }, "nav_metadata" : { "turn" : 0, "speed" : 15, "course" : 245, "heading" : 246, "geom" : "0101000020E610000033C170AE610617C0B1FB8EE1B1974840" }, "ship_metadata" : { "imo" : 8613310, "callsign" : "SZUH ", "shipname" : "MSC MANDRAKI ", "ship_type" : { "id_detailedtype" : 79, "detailed_type" : "Pilot Ship", "id_shiptype" : 18, "type_name" : "Port Tender", "ais_type_summary" : "Special Craft" }, "mmsi_country" : { "country_code" : 240, "country" : "Greece" } }, "location" : { "type" : "Point", "coordinates" : [ -5.756232, 49.185116 ] } }
// ELLINIKO KARAVI ME POLA PING STIN CELTIC SEA
// { "_id" : 240699000, "total" : 225 }

// #STEP 1  vres ola ta ping ellinikon plion gia ta parapano dates, kanta kai project me sum
db.ais_navigation2.aggregate([{$match: {'ship_metadata.mmsi_country.country': 'Greece', 'ts': {$gte: 1448988894, $lte: 1449075294}}}, {$group: {_id: "$mmsi", total: {$sum: 1}}}])
// result { "_id" : 240266000, "total" : 24 } kratame auto to plio.

// Step 2 pare ola ta pling se mia lista gia to plio pou epileksame (mmsi: 240266000 )
db.ais_navigation2.aggregate([{$match: {'mmsi': 240266000, 'ts': {$gte: 1448988894, $lte: 1449075294}}},{$group: {_id: "$mmsi", total: {$sum: 1}, tranjectory: {$push: "$location"}}}]).pretty()

// step 3 sos https://stackoverflow.com/questions/35656520/find-overlapping-trajectories
// this query implemented on python.


// TEST TRAJECTORY lineString
trajectory = {
  "coordinates" : [

      [
          -3.7298584,
          49.9193987
      ],
      [
          -3.449707,
          49.6818469
      ],
      [
          -2.7355957,
          49.1314084
      ],
      [
          -3.449707,
          49.6818469
      ]

  ],
  "type" : "LineString"
}


/**
 * Complex queries: find trajectories that passed through A, then through B (up to X hours later), then through C (up to 6 hours later)
 * @SOS ARGEI POLI NA FEREI OLA TA PING POU EGINAN GIRO APO ENA SIMIO 
 * isos na periorisw kai to A se timestamp gia logous taxititas
 * 
 *  1449035034,  [-7.072965,47.371117], 
 *  1449034409,  [-7.0410814,47.4131],
 *  1449031119   [ -6.868215, 47.6239]
 */


db.ais_navigation.aggregate([
  {$geoNear: {
    near: { 
      type: "Point",
       coordinates: [-7.072965,47.371117]
      },
      distanceField: "dist.calculated",
      minDistance: 1852*10,
      maxDistance: 1852*30,
      spherical: true,
      key: "location"
    }},
    { $match: {
      'ts': {
        $gte: 1448988894,
        $lte: 1449075294}
    }},
    {$group: {_id: "$mmsi"}}])



      db.ais_navigation2.aggregate([
        {$geoNear: {
          near: port_point.geometry,
          distanceField: "dist.calculated", 
          minDistance: nautical_mile_in_meters*10,
          maxDistance: nautical_mile_in_meters*30,
          spherical: true,
          key: "location"
        }},
        {$group: {_id: "$mmsi"}}])



/**
 * Distance Join Query gia 2 troxies
 * 
 * pernoume 2 polgona
 * 
 */
// poly 1
{
    "type": "Polygon",
    "coordinates": [
      [
        [-6.0974121,49.3036358],
        [-4.822998,49.7670741],
        [-3.482666,50.0218584],
        [-1.7468262, 50.3805025],
        [1.0876465,50.7712078],
        [1.3293457,50.3244227],
        [0.637207,50.0289166],
        [-0.5603027,49.582226],
        [-1.7907715,49.8663167],
        [-1.9555664,48.7996274],
        [-2.3620605,48.8140985],
        [-3.5046387,49.1673386],
        [-5.0537109,48.5965923],
        [-6.3500977,48.994636],
        [-6.0974121,49.3036358]
      ]
    ]
  }

// polygon 2
{
    "type": "Polygon",
    "coordinates": [
      [
        [-5.625,47.4578085],
        [-4.0869141,47.3090342],
        [-1.7138672,45.5217439],
        [-2.5927734,43.8978924],
        [-4.6582031,43.7075935],
        [-8.2617188,43.7075935],
        [-5.8447266,47.15984],
        [-5.625,47.4578085]
      ]
    ]
  }


// me apostasi 100km se perasma me pano pao 90k kai 900. ping
// poli 3 sub poly of poly2
{
    "coordinates": [
      [
        [-5.1855469,47.5765257],
        [-3.6474609,46.7097359],
        [-2.6586914,45.9511497],
        [-3.2299805,45.7828484],
        [-4.7680664,45.6908328],
        [-5.625,46.4378569],
        [-6.0644531,46.8000594],
        [-5.6469727,47.44295],
        [-5.1855469,47.5765257]
      ]
    ],
    "type": "Polygon"
  }


// poly 4 sub poly of poly2

{
    "coordinates": [
      [
        [-7.6464844, 45.3675844],
        [-3.7792969,44.6217541],
        [-1.8896484,44.4337798],
        [-2.4169922,43.5166885],
        [-8.7451172,44.0560117],
        [-8.9208984,45.5525253],
        [-7.6464844,45.3675844]
      ]
    ],
    "type": "Polygon"
  }





  // new poly for distance join me apostasi 50 km
  {
    "coordinates": [
      [
        [-3.9385986,49.8946344],
        [-3.6804199,50.0765319],
        [-3.3013916,50.2103068],
        [-2.9388428,49.9600554],
        [-3.4194946,49.5287739],
        [-3.9605713,49.7280302],
        [-3.9385986,49.8946344]
      ]
    ],
    "type": "Polygon"
  }




  {
    "coordinates": [
      [
        [-3.9111328,48.9405432],
        [-3.9385986,49.3859487],
        [-3.4442139,49.5145101],
        [-2.9223633,49.3966751],
        [-2.3126221,49.099049],
        [-2.6586914,48.9188897],
        [-3.2958984,49.0450696],
        [-3.9111328,48.9405432]
      ]
    ],
    "type": "Polygon"
  }


// mongo query gia na parw ta pings apo to poligono grouparismena se mia lista.
  db.ais_navigation2.aggregate([{$match: { "location" : {"$geoWithin" : {"$geometry" : poly}}}}, {$group: { _id: null, "location" : {"$push" : "$location.coordinates"}}}])
  // query gia na parw to sum ton points sto poly
  db.ais_navigation2.aggregate([{$match: { "location" : {"$geoWithin" : {"$geometry" : poly}}}}, {$group: { _id: null,count: { $sum: 1 } }}])

// DISTANCE JOIN MONGO APPROCH
//STEP 1 CREATE A POLY COLLECTION
db.query_polygons.insertMany([
    {
      "_id" : "test_poly_1",
      "geometry" : {
        "type" : "Polygon",
        "coordinates" : [
            [
                [-5.1855469, 47.5765257],
                [-3.6474609, 46.7097359],
                [-2.6586914, 45.9511497],
                [-3.2299805, 45.7828484],
                [-4.7680664, 45.6908328],
                [-5.625, 46.4378569],
                [-6.0644531, 46.8000594],
                [-5.6469727, 47.44295],
                [-5.1855469, 47.5765257]
            ]
        ] 
      }
  },
  {
    "_id" : "test_poly_2",
    "geometry" : {
      "type" : "Polygon",
      "coordinates" : [
          [
              [-7.6464844, 45.3675844],
              [-3.7792969, 44.6217541],
              [-1.8896484, 44.4337798],
              [-2.4169922, 43.5166885],
              [-8.7451172, 44.0560117],
              [-8.9208984, 45.5525253],
              [-7.6464844, 45.3675844]
          ]
      ] 
    }
  }    
])



/**
 * sto let vazoume fields tou ekso collection
 * kai to match kanoume anafora sta fields tou mesa me $ kai tou ekso me $$
 */
db.query_polygons.aggregate([
  {
    $lookup:
      {
         from: "ais_navigation2",
         let: { geometry: "$geometry"},
         pipeline: [{
           $match: {
            location: {$geoWithin: {"$geometry": {
              "type" : "Polygon",
              "coordinates" : "$$geometry"}}}
            }
           }],  // Cannot include $out or $merge
         as: "pings_in_poly"
      }
  }
]).pretty()



db.ais_navigation2.aggregate([
  {
    $lookup:
      {
         from: "query_polygons",
         let: { poly: "$coordinates"},
         pipeline: [{
           $match: {
            "location" : { 
              $geoWithin: { $geometry: {
                "type" : "Polygon",
                "coordinates" : "$coordinates"
                } 
              }
            }
           }
         }],  // Cannot include $out or $merge
         as: "pings_in_poly"
      }
  }
])



$expr: {
  "location" : { 
    $geoWithin: { $geometry: {
      "type" : "Polygon",
      "coordinates" : "$$poly"
      } 
    }
  }
 }


$match: { "location" : { 
  $geoWithin: { $geometry: {
    "type" : "Polygon",
    "coordinates" : "$$poly"
  } 
}
}
}


db.ais_navigation.aggregate({$match: {location: {$geoWithin: {$geometry: poly.geometry}}}})



db.ais_navigation2.aggregate([{$match: {location: {$geoWithin: {"$box": [
  [-4.861, 49.458],
  [-3.258, 50.164]
]
}}
}}])



db.ais_navigation.aggregate([{$match: {location: {$geoWithin: {"$geometry": {
  "type" : "Polygon",
  "coordinates" : [
      [
          [-7.6464844, 45.3675844],
          [-3.7792969, 44.6217541],
          [-1.8896484, 44.4337798],
          [-2.4169922, 43.5166885],
          [-8.7451172, 44.0560117],
          [-8.9208984, 45.5525253],
          [-7.6464844, 45.3675844]
      ]
  ]
}
}}
}}])


db.ais_navigation.aggregate([{ $match: {"ts": { $lte: 1451520000 }}},
{
  $count: "total_docs"
}
])



db.ais_batch2.aggregate([{ $match: {"ts": { $gte: 1455494400 }}},
{
  $out: "ais_batch22"
}
])
{  }


var poly = {
  "_id" : "test_poly_2",
  "geometry" : {
    "type" : "Polygon",
    "coordinates" : [
        [
            [-7.6464844, 45.3675844],
            [-3.7792969, 44.6217541],
            [-1.8896484, 44.4337798],
            [-2.4169922, 43.5166885],
            [-8.7451172, 44.0560117],
            [-8.9208984, 45.5525253],
            [-7.6464844, 45.3675844]
        ]
    ] 
  }
} 

var poly = db.world_seas.findOne({"properties.NAME": "Celtic Sea"})
db.ais_navigation2.aggregate({$match: {location: {$geoWithin: {$geometry: poly.geometry}}}})

db.world_seas.aggregate([{

}])

db.ais_navigation.aggregate({$match: {mmsi: 205204000}})


// valid location
"location" : {
  "type" : "Point",
  "coordinates" : [
    -4.1660385,
    50.334972
  ]
}

"location" : {
  "type" : "Point",
  "coordinates" : [
    50.334972,
    -4.1660385
  ]
}


/**
 * Distance join sphere
 * https://stackoverflow.com/questions/57936820/how-to-use-geonear-after-lookup
 * https://stackoverflow.com/questions/38339995/mongodb-geonear-with-multiple-matches-in-same-document
 */
db.ais_navigation.aggregate([
  {"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-0.0109863, 50.2823195]},
                      "distanceField" : "dist.calculated",
                      "maxDistance" : 30.000,
                      "spherical" : true, "key" : "location"}
  },{"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-1.3980103, 50.2050333]},
                      "distanceField" : "dist.calculated",
                      "maxDistance" : 120.000,
                      "spherical" : true, "key" : "location"}  
  }
])

// PAIZEI ALLA EXEI TO SHARDED COLL STO LOOKUP
db.ais_navigation2.aggregate([
  {"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-0.0109863, 50.2823195]},
                      "distanceField" : "dist.calculated",
                      "maxDistance" : 30.000,
                      "spherical" : true,
                      "key" : "location"}
  },{
    $lookup:
      {
         from: "ais_navigation2",
         let: { poly: "$location"},
         pipeline: [
          {"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-1.3980103, 50.2050333]},
          "distanceField" : "dist.calculated",
          "maxDistance" : 120.000,
          "spherical" : true, "key" : "location"}  
}
         ],  // Cannot include $out or $merge
         as: "pings_in_poly"
      }
  },{
    $unwind: "$pings_in_poly"
  }
]).pretty()

// paralagi distance join me kiklous na ipostirizei kai shard.
/**
 * step1 aggregate in fist circle to get the risults
 * step2 push results into array propubly using project
 * step3 query for the second circle using $in aggregation for the above array to
 * find the common elements  
 */
// STEP 1,2
db.ais_navigation.aggregate([
  {"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-1.3980103, 50.2050333]},
                      "distanceField" : "dist.calculated",
                      "maxDistance" : 30.000,
                      "spherical" : true,
                      "key" : "location"}
  },{$group:{
    "_id":"",
     "id":{
         $push : "$_id"
     }
}},
{$project:{"id":1,"_id":0}}])

//STEP 3
db.ais_navigation.aggregate([
  {"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-1.3980103, 50.2050333]},
          "distanceField" : "dist.calculated",
          "maxDistance" : 120.000,
          "spherical" : true, "key" : "location"}
  },{$match: {
    _id: {
      $in: db.ais_navigation.aggregate([
        {"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-7.072965,47.371117]},
                            "distanceField" : "dist.calculated",
                            "maxDistance" : 30.000,
                            "spherical" : true,
                            "key" : "location"}
        },{$group:{
          "_id":"",
           "id":{
               $push : "$_id"
           }
      }},
      {$project:{"id":1,"_id":0}}
    ])     
    }
  }}
])


// db.ais_navigation.explain().aggregate(
db.ais_navigation.aggregate([
  {"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-0.0109863, 50.2823195]},
                      "distanceField" : "dist.calculated",
                      "maxDistance" : 30.000,
                      "spherical" : true,
                      "key" : "location"}
  },
  {$match: {'ts': {$gte: 1448988894, $lte: 1449075294}}},
  {$group: {"_id":null, count: {$sum: 1}}}
//   {$group:{
//     "_id":"",
//      "id":{
//          $push : "$_id"
//      }
// }}
  // {$project: {_id: 1}}
  // {$count: "pointsInShape"}
])

db.ais_navigation.aggregate([
  {"$geoNear" : {"near" : {"type" : "Point", "coordinates" : [-1.3980103, 50.2050333]},
          "distanceField" : "dist.calculated",
          "maxDistance" : 30.000,
          "spherical" : true, "key" : "location"}
  },
  {$match: {'ts': {$gte: 1448988894, $lte: 1449075294}}},
  {$count: "pointsInShape"}
  // {$group: { _id: null , pings: {$push: "$_id"}}}
  ])

  db.ais_navigation.aggregate([
    {"$geoNear" : {"near" :  {"type" : "Point", "coordinates" : [-1.3980103, 50.2050333]},
                      "distanceField" : "dist.calculated",
                      "maxDistance" : 1000 * 30,
                      "spherical" : true,"key" : "location"}},
        {"$project": {"_id" : 1}}
   ])




/**
 * fix reversed lat long bug on server
 */
// test doc
db.ais_navigation.find({"mmsi": 923166, "ts": 1448977419}).pretty()
// resstore func
// ferst get all documents
// then update them and push them
//{ "_id" : ObjectId("5ff9cba3a589db8f094d8927"),
// "location" : { "coordinates" : [ 50.334972, -4.1660385 ] } }

db.ais_navigation.find({},{"location.coordinates": 1}).forEach( function(doc){
  var longitude = doc.location.coordinates[1]
  doc.location.coordinates[1] = doc.location.coordinates[0]
  doc.location.coordinates[0] = longitude

  //then update doc
  db.ais_navigation.update({"_id": doc._id}, {
    $set: {
      "location.coordinates": doc.location.coordinates
    }
  })
})

db.ais_navigation.updateMany(
  {}
  [{"$set":{
     "location" : {
      type:"Point",
      coordinates:[
        "$location.coordinates[1]",
        "$location.coordinates[0]"
      ]
     }
   }
  }]
)

// aggregation version
db.ais_navigation.aggregate([{
  $addFields:{
    longitude: {
      $function:{
        body: function(coord){
          var longitude = coord[1]
          
        
          return longitude 
        },
        args: ["$location.coordinates"],
        lang: "js"
      }
    },
    latitude: {
      $function:{
        body: function(coord){
          var latitude = coord[0]
          
        
          return latitude 
        },
        args: ["$location.coordinates"],
        lang: "js"
      }
    }
  }
}])


/**
* entoles
*/

db.dropDatabase()
db.ais_navigation.getShardDistribution()
db.ais_navigation.getIndexes()

/**
 * @INDEXING 
 * 1) create a geoshpere index on location propery
 * 2) create index on mmsi
 * 3) create index on timestamp
 * by default iparxei enas index sto id (morton code)
 */

db.ais_navigation.createIndex({"location":"2dsphere"})
db.ais_navigation.createIndex({"mmsi": 1})
db.ais_navigation.createIndex({"ts": 1})
db.ais_navigation.createIndex( { "ts": 1, "mmsi": "hashed"} )

/**
 * @SHARDING
 */
sh.enableSharding("marine_trafic")
sh.shardCollection("marine_trafic.ais_navigation", {"ts": 1, "mmsi":"hashed"})
